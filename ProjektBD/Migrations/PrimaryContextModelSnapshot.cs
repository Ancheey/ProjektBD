// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjektBD.Data;

#nullable disable

namespace ProjektBD.Migrations
{
    [DbContext(typeof(PrimaryContext))]
    partial class PrimaryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.31");

            modelBuilder.Entity("ProjektBD.Data.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Genre")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PublicationYear")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("ProjektBD.Data.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Emplyees");
                });

            modelBuilder.Entity("ProjektBD.Data.Entities.Fee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RentalId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StatusDateChange")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RentalId");

                    b.ToTable("Fees");
                });

            modelBuilder.Entity("ProjektBD.Data.Entities.Reader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Readers");
                });

            modelBuilder.Entity("ProjektBD.Data.Entities.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RentDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("RentedBookId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RenterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RentingId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Returned")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ReturnedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RentedBookId");

                    b.HasIndex("RenterId");

                    b.HasIndex("RentingId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("ProjektBD.Data.Entities.Fee", b =>
                {
                    b.HasOne("ProjektBD.Data.Entities.Rental", "Rental")
                        .WithMany()
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("ProjektBD.Data.Entities.Rental", b =>
                {
                    b.HasOne("ProjektBD.Data.Entities.Book", "RentedBook")
                        .WithMany("Rentings")
                        .HasForeignKey("RentedBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjektBD.Data.Entities.Reader", "Renter")
                        .WithMany()
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjektBD.Data.Entities.Employee", "Renting")
                        .WithMany()
                        .HasForeignKey("RentingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RentedBook");

                    b.Navigation("Renter");

                    b.Navigation("Renting");
                });

            modelBuilder.Entity("ProjektBD.Data.Entities.Book", b =>
                {
                    b.Navigation("Rentings");
                });
#pragma warning restore 612, 618
        }
    }
}
